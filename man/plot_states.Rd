% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_states.R
\name{plot_states}
\alias{plot_states}
\alias{plot.states}
\title{Plot PVC states}
\usage{
plot_states(
  times,
  peaks,
  pvc,
  omit_segments = NULL,
  min_length = 12,
  rect_col = c(blue = "#0074d9", orange = "#ff851b", green = "#2ecc40", purple =
    "#cc00dd"),
  tz = Sys.timezone(),
  draw = TRUE,
  ...
)

\method{plot}{states}(
  x,
  peaks,
  pvc,
  omit_segments = NULL,
  min_length = 12,
  rect_col = c(blue = "#0074d9", orange = "#ff851b", green = "#2ecc40", purple =
    "#cc00dd"),
  tz = Sys.timezone(),
  draw = TRUE,
  ...
)
}
\arguments{
\item{times}{Vector of times (integers as from Polar H10, datetimes, or character strings)
(Can also be on object of class \code{"states"}, that is the output of the present function,
in which case the arguments \code{peaks}, \code{pvc}, \code{omit_segments}, and \code{min_length}, and \code{tz}
are ignored.}

\item{peaks}{Vector of peak indices as integers from 1 to \code{length(times)}}

\item{pvc}{Vector of boolean indicators of whether the peaks are PVC or not.
Should be the same length as \code{peaks}.}

\item{omit_segments}{Segments to be ignored in analysis, as a data frame with
two columns: the start and end index for each interval to be ignored}

\item{min_length}{Minimum length (as number of beats) for a pattern instance.}

\item{rect_col}{Vector of four rectangle colors: normal, bigeminy, trigeminy, omitted}

\item{tz}{Time zone for converting time stamps}

\item{draw}{If FALSE, don't actually make the plot}

\item{...}{Passed to \code{\link[base:plot]{base::plot()}}}

\item{x}{Object of class \code{"states"}, that is the output of the present function}
}
\value{
Data frame with start and end times and type of state
(normal, bigeminy, trigeminy, omitted). Given class "states"
}
\description{
In a sequence of ECG peaks classified as PVC or not, find patterns
normal, bigeminy, trigeminy, and make a plot of these
}
\examples{
data(polar_h10)
bad_segs <- find_bad_segments(polar_h10$time, polar_h10$ecg)
peaks <- detect_peaks(polar_h10$ecg, omit_segments=bad_segs)
peak_stats <- calc_peak_stats(polar_h10$time, polar_h10$ecg, peaks, omit_segments=bad_segs)
pvc <- (peak_stats$RStime > 50)

plot_states(polar_h10$time, peaks, pvc, omit_segments=bad_segs, xlim=c(50, 60))
}
\seealso{
\code{\link[=find_pvc_pattern]{find_pvc_pattern()}}, \code{\link[=summary_states]{summary_states()}}
}
